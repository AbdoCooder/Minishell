@startuml MinishellEnhancedCommandExecutionFlow
title Minishell - Enhanced Command Execution Flow

start

:Initialize signals with handle_signals();
note right: Setup SIGINT handler for interactive mode

:Initialize environment with ft_envinit();
note right: Parse environment variables into t_list structure

while (Main Loop) is (continue)
  :Display prompt with readline();
  note right: "minishell-1.0$ "

  :Read user input;

  if (input == NULL?) then (yes)
    :Print "[EOF]" and exit;
    stop
  endif

  if (input is empty?) then (yes)
    :Continue to next iteration;
  else (no)
    :Add command to history with add_history();

    :Tokenize input with ft_strtok();
    note right: Lexical Analysis:\n- Handle quotes (single/double)\n- Identify operators (|, <, >, <<, >>)\n- Parse words and variables\n- Create t_token linked list

    :Check syntax with ft_check_syntax();
    if (syntax error?) then (yes)
      :Print error message;
      :Set g_exit_status = 258;
      :Free token list;
    else (no)
      split
        :Parse tokens with ft_parser();
        note right: Syntax Analysis:\n- Group tokens into commands\n- Handle redirections\n- Create t_cmdarg pipeline
      split again
        :Expand environment variables with ft_expand_variables();
        note right: Variable Expansion:\n- \$VAR, \$?, \$HOME, etc.\n- Handle quotes during expansion
      end split

      :Check heredocs with check_here_doc();
      if (heredoc error?) then (yes)
        :Cleanup and continue;
      else (no)
        :Check if single builtin with check_builtin();
        if (single builtin without pipes?) then (yes)
          :Save original stdin/stdout;
          :Handle builtin redirections;
          :Execute builtin command;
          note right: Built-ins: echo, cd, pwd,\nexport, unset, env, exit
          :Reset standard I/O;
          :Update g_exit_status;
        else (no: pipeline or external command)
          :Execute pipeline with execution();

          while (commands in pipeline?) is (more commands)
            if (not last command?) then (yes)
              :Create pipe with pipe();
            endif

            :Fork child process;
            if (child process?) then (yes)
              :Setup child signals;
              :Handle pipe redirections with dup2();
              :Handle input redirections (<, <<);
              if (not last command?) then (yes)
                :Redirect stdout to pipe write end;
              endif
              :Handle output redirections (>, >>);

              if (builtin in pipeline?) then (yes)
                :Execute builtin and exit with status;
              else (external command)
                :Search for executable with check_exec();
                note right: PATH resolution or full path
                if (executable found?) then (yes)
                  :Get environment array with get_env();
                  :Execute with execve();
                else (no)
                  :Display "command not found" error;
                  :Exit with status 127;
                endif
              endif
            else (parent process)
              :Close unused pipe ends;
              :Update tmp_in for next command;
              :Close heredoc file descriptors;
            endif
          endwhile (no more commands)

          :Setup parent waiting signals;
          :Wait for all children with ft_wait_children();
          :Update g_exit_status from last command;
          :Restore original signals;
        endif
      endif
    endif

    :Cleanup with ft_cleaner();
    note right: Free token_list and cmdarg_list
  endif

  :Free input string;
endwhile (exit)

stop

note top of start : "Main entry point: main()\nContinuous REPL loop with error handling"

note right of "Tokenize input with ft_strtok()" : "Advanced Tokenization:\n- State machine for quotes\n- Operator precedence\n- Variable detection\n- Memory-efficient linked list"

note right of "Check heredocs with check_here_doc()" : "Heredoc Processing:\n- Fork for each heredoc\n- Read until delimiter matched\n- Handle variable expansion in heredoc\n- Store in temporary files/pipes\n- Parent-child coordination"

note right of "Execute pipeline with execution()" : "Process Management:\n- Create pipes between commands\n- Fork for each command in pipeline\n- Handle complex I/O redirections\n- Signal handling for interruption\n- Proper cleanup of file descriptors"

note right of "Handle input redirections (<, <<)" : "I/O Redirection:\n- File existence checking\n- Permission validation\n- Ambiguous redirect detection\n- Multiple redirections handling"

note right of "Handle output redirections (>, >>)" : "Output Handling:\n- File creation/truncation\n- Append mode support\n- Error handling for write permissions\n- Last redirection takes precedence"

note bottom of stop : "Exit Status Management:\n- Built-in command exit codes\n- Signal-based exit codes (130 for Ctrl+C)\n- Command not found (127)\n- Syntax errors (258)"

@enduml
